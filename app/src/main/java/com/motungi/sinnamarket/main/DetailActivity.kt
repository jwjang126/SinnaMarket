package com.motungi.sinnamarket.main

import android.content.Intent
import android.location.Geocoder
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration
import com.motungi.sinnamarket.R
import com.motungi.sinnamarket.auth.PhotoAdapter
import com.naver.maps.geometry.LatLng
import com.naver.maps.map.CameraAnimation
import com.naver.maps.map.CameraUpdate
import com.naver.maps.map.MapView
import com.naver.maps.map.NaverMap
import com.naver.maps.map.OnMapReadyCallback
import com.naver.maps.map.overlay.Marker
import java.util.Locale

class DetailActivity : AppCompatActivity(), OnMapReadyCallback {

    private lateinit var photoRecyclerView: RecyclerView
    private lateinit var photoAdapter: PhotoAdapter
    private val imageUrls = mutableListOf<Uri>()

    private val db = FirebaseFirestore.getInstance()
    private val currentUser = FirebaseAuth.getInstance().currentUser
    private var voteListener: ListenerRegistration? = null

    private lateinit var mapView: MapView
    private var postLat: Double = 0.0
    private var postLng: Double = 0.0
    private var isMapReady = false
    private var isDataLoaded = false
    private lateinit var naverMap: NaverMap

    private lateinit var voteOptionsContainer: LinearLayout

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_detail)

        photoRecyclerView = findViewById(R.id.detailPhotoRecyclerView)
        photoAdapter = PhotoAdapter(imageUrls)
        photoRecyclerView.adapter = photoAdapter
        photoRecyclerView.layoutManager =
            LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)

        voteOptionsContainer = findViewById(R.id.voteOptionsContainer)

        val productId = intent.getStringExtra("productId") ?: run {
            Toast.makeText(this, "ÏÉÅÌíà Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        val distance = intent.getDoubleExtra("distance", -1.0)
        val distanceTextView = findViewById<TextView>(R.id.detaildistance)

        distanceTextView.text = if (distance >= 0) {
            if (distance < 1.0) {
                // Í±∞Î¶¨Í∞Ä 1km ÎØ∏ÎßåÏùº Í≤ΩÏö∞ ÎØ∏ÌÑ∞(m)Î°ú Î≥ÄÌôò
                val distanceInMeters = distance * 1000
                String.format("ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú %.0f m", distanceInMeters)
            } else {
                // Í±∞Î¶¨Í∞Ä 1km Ïù¥ÏÉÅÏùº Í≤ΩÏö∞ ÌÇ¨Î°úÎØ∏ÌÑ∞(km)Î°ú ÌëúÏãú
                String.format("ÌòÑÏû¨ ÏúÑÏπòÏóêÏÑú %.1f km", distance)
            }
        } else {
            "Í±∞Î¶¨ Ï†ïÎ≥¥ ÏóÜÏùå"
        }

        mapView = findViewById(R.id.map_view)
        mapView.onCreate(savedInstanceState)
        mapView.getMapAsync(this)

        // ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        db.collection("product").document(productId).get()
            .addOnSuccessListener { doc ->
                if (!doc.exists()) return@addOnSuccessListener

                val itemName = doc.getString("title") ?: ""
                val itemDesc = doc.getString("description") ?: ""
                val year = doc.getLong("date.year") ?: 0
                val month = doc.getLong("date.month") ?: 0
                val day = doc.getLong("date.day") ?: 0
                val itemPrice = doc.getLong("price") ?: 0
                val images = doc.get("imageUrls") as? List<String> ?: listOf()
                val uris = images.map { Uri.parse(it) }
                val isAvailable = doc.getBoolean("re_location") ?: false
                val locationMap = doc.get("location") as? Map<String, Any>
                val lat = locationMap?.get("lat") as? Double
                val lng = locationMap?.get("lng") as? Double
                val detailedDesc = locationMap?.get("desc") as? String ?: ""
                val authorId = doc.getString("authorid") ?: ""
                val numPeople = doc.getLong("numPeople") ?: 0
                val state = doc.getBoolean("state") ?: false

                if (lat != null && lng != null) {
                    this.postLat = lat
                    this.postLng = lng
                    isDataLoaded = true
                    setupMapIfNeeded()
                    findViewById<TextView>(R.id.detailadress).text = getAddressFromLatLng(lat, lng)
                }

                imageUrls.clear()
                imageUrls.addAll(uris)
                photoAdapter.notifyDataSetChanged()

                findViewById<TextView>(R.id.detailItemName).text = itemName
                findViewById<TextView>(R.id.detailItemDesc).text = itemDesc
                findViewById<TextView>(R.id.detailItemPrice).text = "$itemPrice Ïõê"
                findViewById<TextView>(R.id.detailrelocation).text =
                    if (isAvailable) "ÏúÑÏπò Ï°∞Ïú® Í∞ÄÎä•" else "ÏúÑÏπò Ï°∞Ïú® Î∂àÍ∞ÄÎä•"
                findViewById<TextView>(R.id.detaildate).text = "ÏûëÏÑ±Ïùº: $year ÎÖÑ $month Ïõî $day Ïùº"
                findViewById<TextView>(R.id.detailadress2).text = detailedDesc

                // ÏûëÏÑ±Ïûê Ï†ïÎ≥¥
                if (authorId.isNotEmpty()) {
                    db.collection("users").document(authorId).get()
                        .addOnSuccessListener { userDoc ->
                            val authorName = userDoc.getString("nickname") ?: "Unknown"
                            val rating = userDoc.getDouble("rating") ?: 0.0
                            findViewById<TextView>(R.id.detailAuthorInfo).text =
                                "ÏûëÏÑ±Ïûê: $authorName (ÌèâÏ†ê: $rating)"
                        }
                }

                // Ïã§ÏãúÍ∞Ñ Ìà¨Ìëú Î∞òÏòÅ
                listenVoteOptions(productId,numPeople,state)
            }
            .addOnFailureListener { Log.e("DetailActivity", "ÏÉÅÌíà Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: ${it.message}") }
    }

    override fun onMapReady(naverMap: NaverMap) {
        this.naverMap = naverMap
        isMapReady = true
        setupMapIfNeeded()
    }

    private fun setupMapIfNeeded() {
        if (isMapReady && isDataLoaded) {
            val postLocation = LatLng(postLat, postLng)
            naverMap.moveCamera(CameraUpdate.scrollTo(postLocation).animate(CameraAnimation.Easing))
            Marker().apply { position = postLocation; map = naverMap }
        }
    }

    private fun getAddressFromLatLng(lat: Double, lng: Double): String {
        val geocoder = Geocoder(this, Locale.KOREA)
        return try {
            geocoder.getFromLocation(lat, lng, 1)?.firstOrNull()?.getAddressLine(0) ?: "Ï£ºÏÜå Ï†ïÎ≥¥ ÏóÜÏùå"
        } catch (e: Exception) { e.printStackTrace(); "Ï£ºÏÜå Î≥ÄÌôò Ïã§Ìå®" }
    }

    private fun listenVoteOptions(productId: String, numPeople: Long,state: Boolean) {
        voteListener?.remove()
        val voteOptionsRef = db.collection("product").document(productId).collection("voteOptions")
        voteListener = voteOptionsRef.addSnapshotListener { snapshot, error ->
            if (error != null || snapshot == null) return@addSnapshotListener
            voteOptionsContainer.removeAllViews()

            for (optionDoc in snapshot.documents) {
                val optionId = optionDoc.id
                val timeStr = optionDoc.getString("time") ?: ""

                val inflater = LayoutInflater.from(this)
                val optionLayout = inflater.inflate(R.layout.vote_option_item, voteOptionsContainer, false)
                val timeText = optionLayout.findViewById<TextView>(R.id.voteTimeText)
                val voteButton = optionLayout.findViewById<Button>(R.id.voteButton)
                val qtyInput = optionLayout.findViewById<EditText>(R.id.voteQuantityInput)
                val voteCountText = optionLayout.findViewById<TextView>(R.id.voteCountText)

                timeText.text = timeStr

                val votersRef = voteOptionsRef.document(optionId).collection("voters")

                // Ïã§ÏãúÍ∞ÑÏúºÎ°ú Ìà¨Ìëú ÏÉÅÌÉú Î∞òÏòÅ
                votersRef.addSnapshotListener { votersSnap, _ ->
                    var totalVotes = 0
                    var myVoteQty = 0
                    for (voterDoc in votersSnap?.documents ?: listOf()) {
                        val qty = voterDoc.getLong("qty")?.toInt() ?: 0
                        totalVotes += qty
                        if (voterDoc.id == currentUser?.uid) myVoteQty = qty
                    }

                    voteCountText.text = "Ìà¨Ìëú Ïàò: $totalVotes"
                    qtyInput.setText(myVoteQty.toString())

                    // ‚úÖ stateÍ∞Ä trueÎ©¥ ÎπÑÌôúÏÑ±Ìôî, falseÎ©¥ Ìï≠ÏÉÅ ÌÅ¥Î¶≠ Í∞ÄÎä•
                    voteButton.isEnabled = !state
                    qtyInput.isEnabled = !state
                    voteButton.text = if (myVoteQty > 0) "Îã§Ïãú Ìà¨ÌëúÌïòÍ∏∞" else "Ìà¨Ìëú"
                }

                voteButton.setOnClickListener {
                    val qty = qtyInput.text.toString().toIntOrNull() ?: 0
                    val userId = currentUser?.uid ?: return@setOnClickListener
                    val voterRef = votersRef.document(userId)
                    val optionRef = voteOptionsRef.document(optionId)

                    // üîπ product Î¨∏ÏÑú Î®ºÏ†Ä ÌôïÏù∏
                    db.collection("product").document(productId).get()
                        .addOnSuccessListener { productSnap ->
                            val productState = productSnap.getBoolean("state") ?: false
                            val numPeople = productSnap.getLong("numPeople") ?: Long.MAX_VALUE

                            // Ïù¥ÎØ∏ Ï¢ÖÎ£åÎêú Í≤ΩÏö∞
                            if (productState) {
                                Toast.makeText(this, "Ïù¥ÎØ∏ Ìà¨ÌëúÍ∞Ä Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                                return@addOnSuccessListener
                            }

                            // Ìä∏ÎûúÏû≠ÏÖò Ïã§Ìñâ
                            db.runTransaction { transaction ->
                                val optionSnap = transaction.get(optionRef)
                                val currentTotal = optionSnap.getLong("total") ?: 0
                                val voterSnap = transaction.get(voterRef)
                                val prevQty = voterSnap.getLong("qty") ?: 0
                                val newTotal = currentTotal - prevQty + qty

                                // üîπ numPeople ÎÑòÏúºÎ©¥ Ï∞®Îã®
                                if (newTotal > numPeople) {
                                    throw Exception("Ïù∏Ïõê Ï†úÌïú Ï¥àÍ≥º")
                                }

                                if (qty > 0) transaction.set(voterRef, mapOf("qty" to qty))
                                else transaction.delete(voterRef)

                                transaction.update(optionRef, "total", newTotal)
                            }.addOnSuccessListener {
                                optionRef.get().addOnSuccessListener { optionSnap ->
                                    val total = optionSnap.getLong("total") ?: 0L

                                    // üîπ Ìà¨Ìëú Ï¢ÖÎ£å Ï°∞Í±¥ ÌôïÏù∏
                                    if (total >= numPeople && !productState) {
                                        // product.state ÏóÖÎç∞Ïù¥Ìä∏
                                        db.collection("product").document(productId)
                                            .update("state", true)

                                        // Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±
                                        votersRef.get().addOnSuccessListener { votersSnap ->
                                            val participantIds = votersSnap.documents.map { it.id }.toMutableList()
                                            val authorId = productSnap.getString("authorid")
                                            if (!authorId.isNullOrEmpty()) participantIds.add(authorId)

                                            val chatRoomMembers = participantIds.distinct()
                                            val chatRoomRef = db.collection("chats").document()
                                            chatRoomRef.set(
                                                mapOf(
                                                    "productId" to productId,
                                                    "participants" to chatRoomMembers
                                                )
                                            ).addOnSuccessListener {
                                                val messagesRef = chatRoomRef.collection("messages")
                                                messagesRef.add(
                                                    mapOf(
                                                        "senderId" to "system",
                                                        "text" to "Ìà¨ÌëúÍ∞Ä Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§. Ï±ÑÌåÖÎ∞©Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.",
                                                        "createdAt" to System.currentTimeMillis()
                                                    )
                                                )
                                                chatRoomMembers.forEach { userId ->
                                                    db.collection("users").document(userId)
                                                        .update("chatRooms", com.google.firebase.firestore.FieldValue.arrayUnion(chatRoomRef.id))
                                                }

                                                val intent = Intent(this@DetailActivity, ChatroomActivity::class.java)
                                                intent.putExtra("chatRoomId", chatRoomRef.id)
                                                startActivity(intent)
                                            }
                                        }
                                    }
                                }
                            }.addOnFailureListener { e ->
                                if (e.message?.contains("Ïù∏Ïõê Ï†úÌïú Ï¥àÍ≥º") == true) {
                                    Toast.makeText(this, "Ìà¨Ìëú Ïù∏ÏõêÏù¥ Ïù¥ÎØ∏ Í∞ÄÎìù Ï∞ºÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                                } else {
                                    Log.e("DetailActivity", "Ìà¨Ìëú Ïã§Ìå®: ${e.message}")
                                }
                            }
                        }
                }

                voteOptionsContainer.addView(optionLayout)
            }
        }
    }




    override fun onStart() {
        super.onStart()
        mapView.onStart()
    }

    override fun onDestroy() {
        super.onDestroy()
        voteListener?.remove()
    }
}
